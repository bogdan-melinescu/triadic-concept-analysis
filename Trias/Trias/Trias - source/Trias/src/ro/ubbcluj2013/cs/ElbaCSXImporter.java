package ro.ubbcluj2013.cs;

import java.util.ArrayList;

import ro.ubbcj.cs.trias.controller.MainTriasController;
import ro.ubbcj.cs.trias.ui.MainFrame1;


/**
 * This is the class that handles importing data from the CSX file
 * that is generated by Elba. A CSX is written as an XML file that
 * contains graphical used by graph drawers
 */
public class ElbaCSXImporter {
	//Path to the CSX file
	private String csxFilePath;
	
	//Class that handles the parsing
	private CSXHandler_DOM csxHandler;
	
	//The resulted colected data:		
	private ArrayList<CSXDiagram> diagramObjectList;
	
	private ArrayList<CSXMetaDiagram> attributeMetaDiagramList;
	private ArrayList<CSXMetaDiagram> conditionMedaDiagramList;
	
	private MainFrame1 mainFrame;
	
	public ElbaCSXImporter(String _csxFilePath, MainFrame1 _mainFrame){
		this.mainFrame = _mainFrame;
		
		this.csxFilePath = _csxFilePath;
		
		this.csxHandler = new CSXHandler_DOM( this.csxFilePath );
		
		this.diagramObjectList = csxHandler.loadFromCSX();
		
		this.attributeMetaDiagramList = new ArrayList<CSXMetaDiagram>();
		this.conditionMedaDiagramList = new ArrayList<CSXMetaDiagram>();
	}
	
	public void sendLists() {
		String tableName = mainFrame.getTableName();// = mainFrame.get
		String objectColName = mainFrame.getColumnName(); // = mainFrame.get
		
		ArrayList<String> attributeWhereClause = new ArrayList<String>();
		ArrayList<String> conditionWhereClause = new ArrayList<String>();
		
		for( CSXMetaDiagram csxMD : this.attributeMetaDiagramList ) {
			for( String query : csxMD.getListOfQueries() ) {
				attributeWhereClause.add(query);
			}
		}
		
		for( CSXMetaDiagram csxMD : this.conditionMedaDiagramList ) {
			for( String query : csxMD.getListOfQueries() ) {
				conditionWhereClause.add(query);
			}
		}
		
		mainFrame.getController().readDataFromDatabase(tableName, objectColName, attributeWhereClause, conditionWhereClause);
	}
	
	
	
	//Getters and setters
	public String getCsxFilePath() {
		return csxFilePath;
	}

	public void setCsxFilePath(String csxFilePath) {
		this.csxFilePath = csxFilePath;
	}
	
	public ArrayList<CSXDiagram> getDiagramObjectList() {
		return this.diagramObjectList;
	}
	
	public ArrayList<String> getDiagramNameList() {
		ArrayList<String> diagramListName = new ArrayList<String>();
		
		for( CSXDiagram diagramObject : this.diagramObjectList ) {
			diagramListName.add(diagramObject.getDiagramName());
		}
		
		return diagramListName;
	}
	
	public void addAttributeMetaDiagram(String _diagramNames) {
		CSXMetaDiagram csxMD = createMetaDiagram(_diagramNames);
		
		this.attributeMetaDiagramList.add(csxMD);
	}
	
	public void addConditionMetaDiagram(String _diagramNames) {
		CSXMetaDiagram csxMD = createMetaDiagram(_diagramNames);
		
		this.conditionMedaDiagramList.add(csxMD);
	}
	
	private CSXMetaDiagram createMetaDiagram(String _diagramNames) {
		CSXMetaDiagram csxMD= new CSXMetaDiagram();
		
		String[] diagramArray = _diagramNames.split("\\+");
		
		for( String diagName : diagramArray ) {
			CSXDiagram diag = getDiagramByName(diagName);
			
			if( diag != null ) {
				csxMD.addDiagram(diag);
			}			
		}
		
		return csxMD;
	}
	
	private CSXDiagram getDiagramByName(String _diagramName) {
		for( CSXDiagram diag : diagramObjectList ) {
			if( diag.getDiagramName().equals(_diagramName) ){
				return diag;
			}							
		}
		
		return null;
	}

	public ArrayList<CSXMetaDiagram> getAttributeMetaDiagramList() {
		return attributeMetaDiagramList;
	}

	public void setAttributeMetaDiagramList(
			ArrayList<CSXMetaDiagram> attributeMetaDiagramList) {
		this.attributeMetaDiagramList = attributeMetaDiagramList;
	}

	public ArrayList<CSXMetaDiagram> getConditionMedaDiagramList() {
		return conditionMedaDiagramList;
	}

	public void setConditionMedaDiagramList(
			ArrayList<CSXMetaDiagram> conditionMedaDiagramList) {
		this.conditionMedaDiagramList = conditionMedaDiagramList;
	}
}
